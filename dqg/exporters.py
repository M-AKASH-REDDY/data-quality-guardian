from typing import Dict, Any, List, Optional
import json, os, time
import pandas as pd

def export_great_expectations(profile: Dict[str, Any], rules: List[Dict[str, Any]], out_dir: str = "exports") -> str:
    """Write a very small GE-like expectation JSON (not a full project) for demo purposes."""
    os.makedirs(out_dir, exist_ok=True)
    expectations = []
    for r in rules:
        col = r.get("column")
        kind = r.get("rule")
        if kind == "not_null":
            expectations.append({"expectation_type": "expect_column_values_to_not_be_null", "kwargs": {"column": col}})
        elif kind == "between" and "min" in r and "max" in r:
            expectations.append({"expectation_type": "expect_column_values_to_be_between", "kwargs": {"column": col, "min_value": r["min"], "max_value": r["max"]}})
        elif kind == "allowed_values" and "values" in r:
            expectations.append({"expectation_type": "expect_column_values_to_be_in_set", "kwargs": {"column": col, "value_set": r["values"]}})

    payload = {
        "created_at": int(time.time()),
        "suite_name": "dqg_autogenerated_suite",
        "expectations": expectations
    }
    path = os.path.join(out_dir, "ge_suite.json")
    with open(path, "w", encoding="utf-8") as f:
        json.dump(payload, f, indent=2)
    return path

def export_markdown_report(profile: Dict[str, Any], rules: List[Dict[str, Any]], anomalies: Dict[str, Any], out_dir: str = "exports") -> str:
    os.makedirs(out_dir, exist_ok=True)
    n_rows = profile.get("n_rows")
    n_cols = profile.get("n_cols")
    lines = [f"# Data Quality Report\n",
             f"**Rows**: {n_rows} | **Columns**: {n_cols}\n",
             "## Suggested Rules\n"]
    for r in rules:
        lines.append(f"- `{r}`\n")
    flagged = anomalies.get("flagged")
    if flagged is not None and not flagged.empty:
        lines.append("\n## Top Anomalies (sample)\n\n")
        lines.append(flagged.head(10).to_markdown(index=False))
        lines.append("\n")
    path = os.path.join(out_dir, "report.md")
    with open(path, "w", encoding="utf-8") as f:
        f.write("\n".join(lines))
    return path